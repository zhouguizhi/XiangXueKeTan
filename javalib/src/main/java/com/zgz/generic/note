1:泛型是jdk那个版本出现的
泛型是jdk5出现的,泛型就是指参数化的类型
2:为什么要出现泛型
 比如这代码:
 List list = new ArrayList();
        list.add(1);
        list.add(2);
        list.add("zhouguizhi");
        //遍历
        for(int i=0;i<list.size();i++){
            Integer integer = (Integer) list.get(i);
            System.out.println("integer="+integer);
        }
        我们在遍历所有的数据的时候,很容易出现类型转换异常,Exception in thread "main" java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
        而且这个错误是在运行期间抛出的,会导致程序直接挂掉,肯定是不一个不好的体验.如果有了泛型就可以把这个运行期的错误放到编译期间,大大改善了
        程序的健壮性,这是泛型其中的一个优点

        泛型的好处就是：
        A:适用于多种数据类型执行相同的代码
        B:泛型中的类型在使用时指定，不需要强制类型转换
 3:泛型用到哪里
 A:泛型类
 B:泛型接口
 C:泛型方法

 4:泛型类
 就是在类上定义一个泛型
 比如:
 public class GenericClassTest<T>
 比如有继承关系的二个类
 public class GenericClassTest<T> extends SuperGenericClassTest<T>
 继承关系的话,要么子类和父类都是<T>也就是未指定具体类型,要么是父类已经指定了其类型,比如
 public class GenericInterfaceImpl implements GenericInterfaceTest<Integer>
 这个是实现类中的接口已经指定了其类型,就是Integer,那么在子类上就不需要<Integer>,带上也没事,使用如下:
 GenericInterfaceImpl genericInterface = new GenericInterfaceImpl();
         genericInterface.setData(100);
         System.out.println(genericInterface.getData(100));


5:泛型方法
public <T> T getData(T...a){
        return a[a.length/2];
    }
    在泛型方法中,必现要有<T> 这是声明泛型方法,
6:限定类型变量
 /**
 * 返回比较中大的值
 * @return
 */
public <T extends Comparable& Serializable> T getResult(T a, T b){
    return a.compareTo(b)>0?a:b;
}
如果是限制多个的话要使用 & 符号,类放在第一个&后面可以放多个接口,比如这样的
<T extends Comparable& Serializable& List>
这个规则同样适用泛型类中

7:泛型的约束和局限性
a:泛型类或者泛型方法不能使用基本类型
b:在静态的成员变量中不能使用泛型 比如private static T instance;
c:在静态方法中不能使用泛型
d:泛型是不能使用instance of的 if(generic1 instanceof TypeLimitGeneric1<String>) 这会报错,在语法层面就不可以,编译其会报错
e:泛型中可以定义泛型数组,但是不能创建 比如
TypeLimitGeneric1<String>[] arr;//可以
arr = new TypeLimitGeneric1<String>[10];//报错
如果静态方法本来就是一个泛型方法那是可以的,比如下面这代码:
public static <T> T returnResult(T t){
        return t;
    }

why:
因为泛型指定类型是在对象创建的时候才指定其类型,而静态方法和静态变量是在类加载的时候已经加入到方法区中了.



9: 泛型类型的继承规则


10:通配符类型 只能使用在方法上
1:<? extends Fruit> 传入的是Fruit以及Fruit子类  这是控制上限 ,这个只能读取数据,不能写入数据,比如
 GenericType<? extends Fruit> c =  new GenericType<>();
 Fruit x = c.getData();//可以
 c.setData(new Fruit());//报错
 所以<? extends Fruit> 只能安全的读取数据,不能访问数据,原因是:因为? extends Fruit 获取的是Fruit,根据java动态的原理,子类引用指向父类,但是你要写入数据的话,
2:<? super Fruit> 传入的是Fruit以及Fruit的父类  这是控制下限
这个刚好和? extends Fruit 相反, ? super Fruit只能写入数据,不能读取数据


11:虚拟机是如何实现泛型的

12:泛型擦除在什么阶段,为什么擦除后,在运行期还能使用


13:总结
泛型在框架中大量的可以看到泛型的存在,比如MVP,MVVM中如果要写框架的话,肯定是要用到泛型,还有比如jdk中的List Map
等都会用到泛型,比如网络请求也会用到泛型,不过要通过反射去读取泛型的真实类型










