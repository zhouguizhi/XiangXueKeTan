java8新特性
1:速度更快 （hashMap底层实现原理变化）
2:代码更少,因为新缯了lambda
3:强大的stream api
4:便于并行
5:最大化减少空指针异常(Optional)





lambda表达式:是一个匿名函数,我们可以把Lambda表达式理解为是一段可以传递的代码(将代码像数据一样进行传递),可以写出更简洁,更灵活的代码
,作为一种更紧凑的代码风格,使java的语言表达能力得到了提升


lambda表达式基础语法
java8中引入了一个新的操作符,就是 "->",该操作符叫做箭头操作符或者lambda操作符
箭头操作符将lambda表达式分为二个部分,左侧和右侧
左侧:lambda表达式的参数列表
右侧:lambda表达式所需执行的功能 即lambda体

语法格式一:如果是无参数类型, 无返回值的, 比如Runnable  表达式:  ()->{}
 Runnable runnable = ()->{
            System.out.println("hello lambda");
        };
        Thread thread = new Thread(runnable);
        thread.start();
语法格式二:有一个参数无返回值
 Consumer<String> consumer = (x)->System.out.println("x="+x);
 consumer.accept("hello lambda");
语法格式三:若只有一个参数,小括号可以省略不写
Consumer<String> consumer = x->System.out.println("x="+x);
consumer.accept("hello lambda");
语法格式四:有二个以上的参数,有返回值 并且lambda体中有多条语句,lambda必须要用{}
Comparator<Integer> comparator = (x,y)->{
            System.out.println("x:="+x);
            System.out.println("y:="+y);
            return Integer.compare(x,y);
        };
 comparator.compare(1,3);
语法格式五:若lambda表达式只有一条语句的话,return和{}都可以不写
Comparator<Integer> comparator = (x,y)->Integer.compare(x,y);
comparator.compare(1,3);
语法格式六:lambda表达式的参数列表的数据类型可以省略不写,为什么呢?因为JVM编译器通过上下文推断出,数据类型 也叫做类型推断 这个和kotlin中定义变量一样



lambda表达式需要 函数式接口 的支持,那么什么是函数是函数式接口呢？
函数式接口:接口中只有一个抽象方法的接口,就叫做函数式接口,可以使用注解@FunctionalInterface 修饰一下,作用是检查是否是函数式接口
@FunctionalInterface
public interface MyPreter<T>{
    void accept(T t);
}










